{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "87dd49ce-2a0c-4d30-a3bd-a850a2ce4a22",
   "metadata": {},
   "source": [
    "#### Aline Rockenzahn \n",
    "#### 745986\n",
    "#### Jueves 26 Septiembre 2024 "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b381f439-003e-4039-a799-9af786fa519c",
   "metadata": {},
   "source": [
    "# <div align =\"center\"> T05-REGRESION LINEAL"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "60b87d46-cb89-47e7-9245-e8f98f13c96d",
   "metadata": {},
   "source": [
    "# Laboratorio de regresión lineal"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4a90eebf-b70f-4d74-9598-e2561c8b1844",
   "metadata": {},
   "source": [
    "La regresión lineal es una heramienta útil para predecir una respuesta cuantitativa. A pesar de que existen soluciones más modernas, la regresión lineal se sigue usando, pues sirve como un punto de partida para comparar otras herramientas.\n",
    "\n",
    "Se debe comprender cómo funciona la regresión antes de empezar a estudiar métodos de aprendizaje estadístico más complejos."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "64bb3533-7e5b-4bfb-871e-527bfdc30b91",
   "metadata": {},
   "source": [
    "1. Descarga el archivo de publicidad y carga los datos (Advertising.csv)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 287,
   "id": "60ccc541-7c03-425c-a394-6815c49bd026",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>TV</th>\n",
       "      <th>radio</th>\n",
       "      <th>newspaper</th>\n",
       "      <th>sales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>230.1</td>\n",
       "      <td>37.8</td>\n",
       "      <td>69.2</td>\n",
       "      <td>22.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>44.5</td>\n",
       "      <td>39.3</td>\n",
       "      <td>45.1</td>\n",
       "      <td>10.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>17.2</td>\n",
       "      <td>45.9</td>\n",
       "      <td>69.3</td>\n",
       "      <td>9.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>151.5</td>\n",
       "      <td>41.3</td>\n",
       "      <td>58.5</td>\n",
       "      <td>18.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>180.8</td>\n",
       "      <td>10.8</td>\n",
       "      <td>58.4</td>\n",
       "      <td>12.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>195</th>\n",
       "      <td>196</td>\n",
       "      <td>38.2</td>\n",
       "      <td>3.7</td>\n",
       "      <td>13.8</td>\n",
       "      <td>7.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>196</th>\n",
       "      <td>197</td>\n",
       "      <td>94.2</td>\n",
       "      <td>4.9</td>\n",
       "      <td>8.1</td>\n",
       "      <td>9.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>197</th>\n",
       "      <td>198</td>\n",
       "      <td>177.0</td>\n",
       "      <td>9.3</td>\n",
       "      <td>6.4</td>\n",
       "      <td>12.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>198</th>\n",
       "      <td>199</td>\n",
       "      <td>283.6</td>\n",
       "      <td>42.0</td>\n",
       "      <td>66.2</td>\n",
       "      <td>25.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>199</th>\n",
       "      <td>200</td>\n",
       "      <td>232.1</td>\n",
       "      <td>8.6</td>\n",
       "      <td>8.7</td>\n",
       "      <td>13.4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>200 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Unnamed: 0     TV  radio  newspaper  sales\n",
       "0             1  230.1   37.8       69.2   22.1\n",
       "1             2   44.5   39.3       45.1   10.4\n",
       "2             3   17.2   45.9       69.3    9.3\n",
       "3             4  151.5   41.3       58.5   18.5\n",
       "4             5  180.8   10.8       58.4   12.9\n",
       "..          ...    ...    ...        ...    ...\n",
       "195         196   38.2    3.7       13.8    7.6\n",
       "196         197   94.2    4.9        8.1    9.7\n",
       "197         198  177.0    9.3        6.4   12.8\n",
       "198         199  283.6   42.0       66.2   25.5\n",
       "199         200  232.1    8.6        8.7   13.4\n",
       "\n",
       "[200 rows x 5 columns]"
      ]
     },
     "execution_count": 287,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd \n",
    "#me ayudaba a traer tablas de excel para acá \n",
    "tabla = pd.read_csv(\"Advertising.csv\") \n",
    "#Es igual que con las tablas xlsx pero aquí es _csv pq ese es el formato del doc con la tabla \n",
    "tabla "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2c626782-59ad-480d-af15-009d8a1755a9",
   "metadata": {},
   "source": [
    "**¿Hay alguna relación entre el presupuesto para publicidad y las ventas?**\n",
    "\n",
    "Nuestra primera meta debe ser determinar si hay evidencia en los datos de que haya una asociación entre estas variables.\n",
    "\n",
    "- ¿Por qué? ¿Qué resultaría si nos diéramos cuenta de la falta de relación entre el presupuesto de publicidad y las ventas?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "029a0cb2-e76e-4a62-b75a-00961fcd3172",
   "metadata": {},
   "source": [
    "Analizando a simple vista la tabla de datos, se puede ver que hay una relación directamente proporcional entre la cantidad total de publicidad entre los 3 medios de comuniación y el valor de ventas que éstos provocan. Es decir, entre mayor es al suma total de publicidad, parece ser que es más grande el número de ventas. Sin embargo qué tanto influye cada medio de comuniación en el aumento o disminución de las ventas ya es algo más difícil de calcular a simple vista. \n",
    "Pero en resúmen, sí se observa que los datos siguen el comportamiento mencionado anteriormente.\n",
    "Si resultara que hubiera una falta de relación entre el presupuesto de publicidad y ventas, significaría que no se podría utilizar ningún modelo (al menos no de forma exacta) para calcular un posible comportamiento de las variables, ya que los datos se comportarían de manera completamente aleatoria sin ningún tipo de orden. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "82551d9d-3a9e-4aaa-969e-da2597df0f27",
   "metadata": {},
   "source": [
    "**¿Qué tan fuerte es esta relación?**\n",
    "Asumiendo que existe esta relación, ¿nos sirve conocer el impacto que tiene invertir en publicidad en las ventas?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2c21b047-e7f2-4023-9a37-f70e4cebcc55",
   "metadata": {},
   "source": [
    "La relación es considerablemente fuerte, ya que al aumentar la cantidad de publicidad aumentan las ventas. \n",
    "Este modelo y el comportamiento de sus datos sería de una utilidad muy grande en casi cualquier empresa, ya que al conocer en qué cantidad se le tiene que invertir a la publicidad, así como a qué medio de comunicación específico, se lograrían maximizar las ventas de la empresa. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "63db9032-85a0-45bc-9700-cd50b54716c6",
   "metadata": {},
   "source": [
    "**¿Cuáles medios están asociados con las ventas? ¿Qué tan grande es la asociación entre un medio específico y las ventas?**\n",
    "\n",
    "Hay 3 medios distintos en los datos. ¿Sirve invertir en los 3? ¿Conviene más invertir sólo en uno?\n",
    "\n",
    "**¿Qué tan seguros estamos de que podríamos predecir ventas futuras?**\n",
    "\n",
    "**¿La relación es lineal?**\n",
    "\n",
    "**¿Hay sinergia entre estos medios?**\n",
    "\n",
    "Puede ser que gastar \\\\$50,000 en publicidad y otros \\\\$50,000 en radio es mejor opción que gastar \\\\$100,000 en televisión. A esto le llamamos efecto de interacción.\n",
    "\n",
    "Podemos usar regresión lineal para responder todas estas preguntas."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "73486836-501e-4686-be2a-1bc387b3cb7c",
   "metadata": {},
   "source": [
    "## Regresión lineal simple"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6cecf0d9-c3f7-4c25-996e-9463968f49e0",
   "metadata": {},
   "source": [
    "Un método sencillo para predecir una variable cuantitativa $Y$ dado un solo predictor $X$. Podemos escribir esta relación como:\n",
    "\n",
    "$$ Y \\approx \\beta_0 + \\beta_1 X$$\n",
    "\n",
    "Por ejemplo, si decimos que $X$ se refiere a lo gastado en publicidad de TV y que $Y$ son las ventas, podemos buscar:\n",
    "\n",
    "$$ \\text{ventas} \\approx \\beta_0 + (\\beta_1)(\\text{TV})$$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5bcf97c9-79eb-43fd-a823-456584d406a3",
   "metadata": {},
   "source": [
    "A $\\beta_0$ y $\\beta_1$ se le conoce como los coeficientes o parámetros del modelo. Una vez que usamos los datos históricos para producir estimados $\\hat{\\beta_0}$ y $\\hat{\\beta_1}$, podemos predecir ventar futuras basándonos en lo gastado en publicidad en TV usando\n",
    "$$\\hat{y} = \\hat{\\beta_0} + \\hat{\\beta_1}x $$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f47b145e-7b43-46d2-b9dc-78696215ed75",
   "metadata": {},
   "source": [
    "donde $\\hat{y}$ indica una predicción de $Y$ basado en $X = x$. (El símbolo $\\hat{ }$ se usa para hacer notar que es sólo una estimación de un parámetro desconocido)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "863a98a8-abb7-40d9-99c8-ee7970066925",
   "metadata": {},
   "source": [
    "### Estimando coeficientes"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1f36f0b0-f376-4f89-af0c-42eb1e17bf88",
   "metadata": {},
   "source": [
    "$\\beta_0$ y $\\beta_1$ son desconocidos. Se deben estimar usando los datos antes de poder predecir. \n",
    "\n",
    "$ (x_1, y_1), (x_2, y_2), ..., (x_n, y_n) $ representa $n$ observaciones, cada una con datos medidos para $X$ y $Y$."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bc175234-4113-43bd-b384-cb215bd6b32a",
   "metadata": {},
   "source": [
    "El archivo de publicidad contiene observaciones de 200 mercados y presupuestos usados para publicidad en 3 medios. Nuestra meta actual es encontrar $\\hat{\\beta_0}$ y $\\hat{\\beta_1}$ tal que exista un modelo lineal que se ajuste bien a los datos ($y_i \\approx \\hat{\\beta_0} + \\hat{\\beta_1}x_i$  para $ i=1,...,n$)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ef487568-f4a7-4c20-84f1-26af4d54c54b",
   "metadata": {},
   "source": [
    "Hay muchas formas de medir el ajuste de una curva; la más común es usar el criterio de los mínimos cuadrados. Si $y_i \\approx \\hat{\\beta_0} + \\hat{\\beta_1}x_i$ es una predicción de $Y$ basada en el valor número $i$ de $X$, entonces definimos el error/residuo como $e_i = y_i - \\hat{y_i}$. Este residuo es la diferencia entre el valor observado y el valor estimado por nuestro modelo lineal. Definimos la suma de los residuos cuadrados (RSS) como:\n",
    "$$ \\text{RSS} = e_1^2 + e_2^2 + ... + e_n^2 $$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5007941e-6e9c-4303-8ec5-306fc159ad46",
   "metadata": {},
   "source": [
    "Utiliza la función `minimize` del módulo `optimize` la librería `scipy` para estimar los parámetros del modelo."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "16181015-1a08-46fb-be7f-6e1a0885b104",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np \n",
    "import matplotlib.pyplot as plt \n",
    "%matplotlib inline \n",
    "#Pues dude hazlo con sólo la TV vs ventas y luego todo vs ventas a ver si dan los mismos parámetros de TV \n",
    "#Ah resulta que si salen diferentes. Entonces primero este es con sólo TV: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "0c8b864f-f200-4173-a253-f5d3716744f6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      230.1\n",
       "1       44.5\n",
       "2       17.2\n",
       "3      151.5\n",
       "4      180.8\n",
       "       ...  \n",
       "195     38.2\n",
       "196     94.2\n",
       "197    177.0\n",
       "198    283.6\n",
       "199    232.1\n",
       "Name: TV, Length: 200, dtype: float64"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pandas_x = tabla[\"TV\"] \n",
    "pandas_x \n",
    "#ojo nota que en la tabla csv el i va del 1 al 200, pero aquí va del 0 al 199, no te vayas a confundir. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "300968a9-a1cb-48a4-a249-57bcbd61d871",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      22.1\n",
       "1      10.4\n",
       "2       9.3\n",
       "3      18.5\n",
       "4      12.9\n",
       "       ... \n",
       "195     7.6\n",
       "196     9.7\n",
       "197    12.8\n",
       "198    25.5\n",
       "199    13.4\n",
       "Name: sales, Length: 200, dtype: float64"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pandas_y = tabla[\"sales\"] \n",
    "pandas_y "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "59890a95-23f2-47bd-87e4-5c8fbcd464ea",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "200"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cantidad_puntos = tabla[\"sales\"].size \n",
    "n = cantidad_puntos \n",
    "n "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "be3f5fd2-d996-4e46-8716-69b871694b89",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Tengo series pandas, para convertirlas a arreglos numpy es: \n",
    "x = pandas_x.to_numpy() \n",
    "y = pandas_y.to_numpy() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "bc354721-a6e8-49a7-9c23-db0d2a9fefc2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Ya que tengo mis arreglos de valores de x,y voy a graficar estos puntos para ver cómo se ven \n",
    "plt.scatter(x,y,s=40,c='#06d6a0') \n",
    "plt.grid() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "ce8fc688-d4e4-49a8-a1b0-f2843e1a9a7e",
   "metadata": {},
   "outputs": [],
   "source": [
    "ones = np.ones([n,1]) #crea un vector columna de \"unos\", con n columnas\n",
    "#este vector es el \"término\" o coeficiente de beta 0 \n",
    "x_factor = np.reshape(x, [n,1])\n",
    "#arriba pusimos x como un arreglo, osea matriz de 1xn, pero para operaciones matriciales \n",
    "#nos interesa que este vector sea una matriz columna de nx1 \n",
    "#en este caso como sólo había 2 factores: b0 y b1 sólo necesitamos 2 vectores con nuestros coeficiemtes\n",
    "#Pero si hubiera más, tendríamos que crear más vectores \n",
    "#Abajo juntamos los vectores columna para hacer nuestra matriz de coeficientes X \n",
    "X = np.hstack((ones, x_factor))\n",
    "#hstack combina las columnas horizontalmente. Ahora X es una matriz de los coeficientes de \n",
    "#tamaño nx2 (siempre será puntos que tengo x núm de coeficientes....eso es X) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "ff3360c2-f92e-43c3-9825-8d47f1dbabfd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# n = 200\n",
    "# y = b0(1) + b1*(x)\n",
    "# ¿De qué tamaño va a ser X? (200 x 2)\n",
    "y_vector = np.reshape(y, [n,1]) #este es mi vector columna con las \"y\" reales \n",
    "n, p = X.shape\n",
    "#esto es para crear 2 variables en donde n sea el num de filas de X y p el num de columnas. \n",
    "#osea n= muestras, p = num de factores \n",
    "beta = np.random.rand(p)     #este beta siempre estará definido así para inicializarse de manera random o hay casos donde no? \n",
    "#osea este es como mi primer guess random\n",
    "#Pero hay un rango para estos valores de beta? cuál es el límite de estos num random?y es un vector fila vdd?\n",
    "\n",
    "\n",
    "\n",
    "#el tamaño de X va a ser siempre nxp \n",
    "# donde n es la cantidad de muestras (200) \n",
    "# p = la cantidad de factores \n",
    "\n",
    "def funcion_de_costo(beta, X, y): #esta función me va a dar la suma de los errores calculados hacia cada punto para una recta específica\n",
    "    # y: valor verdadero medido\n",
    "    # beta: coeficientes de los factores \n",
    "    # X: factores \n",
    "    n, p = X.shape\n",
    "    beta = np.reshape(beta, [p,1])\n",
    "    y_prediccion = X @ beta \n",
    "    error = y_prediccion - y #lo que yo tengo que optimizar es el error, esto. \n",
    "    #El orden da igual entre estos 2 componentes vdd? \n",
    "    rss = error.T @ error \n",
    "    return rss[0,0]\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "3b417590-1840-4585-8f36-c8ff3dacfc07",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "  message: Desired error not necessarily achieved due to precision loss.\n",
       "  success: False\n",
       "   status: 2\n",
       "      fun: 2102.530583132473\n",
       "        x: [ 7.033e+00  4.754e-02]\n",
       "      nit: 7\n",
       "      jac: [ 0.000e+00 -6.104e-05]\n",
       " hess_inv: [[ 1.368e-02 -7.604e-05]\n",
       "            [-7.604e-05  5.165e-07]]\n",
       "     nfev: 129\n",
       "     njev: 42"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import scipy.optimize as opt \n",
    "solucion = opt.minimize(funcion_de_costo, beta, args=(X,y_vector)) \n",
    "solucion "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "4154d58a-e118-4ee6-906d-118dd0d619f7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Los parámetros del modelo utilizando sólo TV y ventas son b_0: 7.032597523197717 beta_1: 0.04753661279982894\n"
     ]
    }
   ],
   "source": [
    "# dice false porque el error es uniforme y no normal\n",
    "beta_0 = solucion.x[0] \n",
    "beta_1 = solucion.x[1] \n",
    "print(\"Los parámetros del modelo utilizando sólo TV y ventas son b_0: \" + str(beta_0) + \" beta_1: \" + str(beta_1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "id": "0c237196-3f2a-4ab6-9be5-7d781ac269bb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Para graficar la recta obtenida en nuestro gráfico con puntos:\n",
    "valores_beta = [7.0325979987582965, 0.04753661038743672] \n",
    "plt.scatter(x,y,s=40,c='#06d6a0') \n",
    "x_lim = [0,300] \n",
    "x_lim_ones = np.c_[np.ones(2), x_lim]\n",
    "y_lim = x_lim_ones.dot(valores_beta)\n",
    "plt.plot(x_lim, y_lim, 'r-')\n",
    "plt.axis([0,300,0,30])\n",
    "plt.xlabel('TV')\n",
    "plt.ylabel('ventas')\n",
    "plt.title('TV x ventas') \n",
    "plt.grid() "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d2339aa6-0dd2-481b-bdca-c244b879db88",
   "metadata": {},
   "source": [
    "Al resolver el problema analíticamente se encuentra:\n",
    "\n",
    "$$ \\hat{\\beta_1} = \\frac{\\sum_{i=1}^n (x_i - \\bar{x})(y_i - \\bar{y})}{\\sum_{i=1}^n (x_i - \\bar{x})} $$\n",
    "\n",
    "$$ \\hat{\\beta_0} = \\bar{y} - \\hat{\\beta_1}\\bar{x} $$\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc8aba27-371e-4bf9-9554-376857ae79d3",
   "metadata": {},
   "source": [
    "Compara las estimaciones que encontraste con `minimize` con las que se encuentran con la fórmula dada arriba ($\\bar{x}$ y $\\bar{y}$ son las medias muestrales)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 415,
   "id": "01129348-e412-44eb-91fc-a7fc597b4322",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(7.0325935491276965, 0.047536640433019736)"
      ]
     },
     "execution_count": 415,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Tengo que trabajar con numpy porque son arreglos. NO son los vectores ojo, x son los datos de la tabla que converí a arreglo numpy. \n",
    "b1 = np.sum((x - np.mean(x))*(y-np.mean(y)))/np.sum((x-np.mean(x))**2)\n",
    "b0 = np.mean(y) - b1*np.mean(x)\n",
    "b0, b1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f69233c8-3a72-486f-8597-6b75d7675d88",
   "metadata": {},
   "source": [
    "Crea una gráfica donde se muestren las observaciones como una nube de puntos y la línea que ajustaste con regresión."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "id": "ac0291e7-e1d8-45dd-bd61-1126f84d6be7",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Este punto lo hice en la parte de arriba antes de realizar la regresión lineal para observar los puntos. No quise volverlo a poner aquí porque haría más largo el doc. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8d2354fb-f962-4002-85ab-f97b8090d3cc",
   "metadata": {},
   "source": [
    "### Verificando la precisión de nuestros coeficientes estimados"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d3b42595-b87b-417d-b923-860d0cc03351",
   "metadata": {},
   "source": [
    "Recuerda que en el mundo real hay ruidos y errores de medición. Siempre se asume que la verdadera relación entre $X$ y $Y$ es $$Y = \\beta_0 + \\beta_1 X + \\epsilon$$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "383a19fd-179e-4f16-883b-de7e7ad855cb",
   "metadata": {},
   "source": [
    "Se asume que el término de error es independiente de $X$ (el error siempre es el mismo sin importar el valor de $X$). Este modelo describe a la *línea de regresión de la población*, que es la mejor aproximación de la verdadera relación entre $X$ y $Y$. Cuando usamos mínimos cuadrados encontramos la *línea de mínimos cuadrados*."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f25db060-f44d-4e3f-a9b6-6ce61b001e1c",
   "metadata": {},
   "source": [
    "¿Cuál es la diferencia entre población y muestra?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4c5cdd7e-ab20-4e5a-ab92-7c71306441c4",
   "metadata": {},
   "source": [
    "Con mis propias palabras, la manera en que yo entiendo ambos conceptos es que la población es la totalidad de los datos que se van a estudiar, por ejemplo, si se están estudiando las estaturas de las personas en México, la **población** sería tener los datos de estatura de absolutamente cada ciudadano existente en el país (lo cual obviamente es imposible de saber). \n",
    "En cambio, las **muestras** son un grupo de la población a estudiar que sin embargo sea LO SUFICIENTEMENTE GRANDE y SUFICIENTEMENTE VARIADA para representar aproximadamente la población total. Es decir, no puedes agarrar a la población de tu colonia y decir \"este grupo representa las estaturas de México\" porque no sería del tamaño adecuado, y tampoco puedes agarrar el estado de Chihuaha como muestra porque puede que las estaturas del norte de Méxio y del sur sean muy diferentes. \n",
    "En resúmen, es complicado escoger una muestra adecuada de la población para hacer mediciones de lo que sea. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "25fbb7e9-2e60-490e-9e7c-e0fd0ee6ebb0",
   "metadata": {},
   "source": [
    "¿Cuál crees que sea la diferencia entre hacer una regresión con todos los datos de la población y una muestra de ella?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "89d62996-07ce-4e5d-89d1-d89fbe4404ad",
   "metadata": {},
   "source": [
    "Que hacer una regresión con la población sería encontrar un modelo \"perfecto\" para el caso, ya que se tendrían a disposición absolutamente todos los datos existentes. En cambio hacer una regresión con una muestra de la población será un modelo bastante válido que puede ayudar a tomar desiciones o analizar datos, pero se tiene que estar consciente que jamás será 100% correcto. Si otra persona realizara una regresión con una muestra parecida pero ligeramente, ya obtendría resultados distintos, por lo que hay que saber los alcances de tu modelo, y comprender que este tipo de procesos no serán nunca ni el más correcto, ni el único verdadero. La ingeniería en general se basa en probabilidades y estimados. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "39bc8b65-5dc3-49ee-8aa9-39306627d1b4",
   "metadata": {},
   "source": [
    "La línea de regresión de la población no se puede observar. El concepto de comparar estas líneas es una extensión natural del acercamiento estadístico estándar de usar información de una muestra para estimar características de una población grande."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "341e5cdc-7661-4def-ac9d-f2a5083b91a4",
   "metadata": {},
   "source": [
    "Imagina que quieres encontrar la altura promedio de un mexicano $\\mu$. Medir a todos y cada uno de los mexicanos en situaciones similares, con la misma regla, mismo operador, y otras incontables formas de minimizar la variación de la medida es una tarea imposible. Lo que podemos asumir es que $\\hat{\\mu} = \\bar{y}$. La media poblacional y la media muestral son diferentes, pero la media muestral es usualmente un buen estimado.\n",
    "\n",
    "De la misma manera, como no contamos con el 100% de la información para hacer una regresión, los coeficientes $\\beta_0$ y $\\beta_1$ son desconocidos. Podemos estimarlos usando mínimos cuadrados, encontrando $\\hat{\\beta_0}$ y $\\hat{\\beta_1}$. Puede que las muestras que tengamos en ese momento estén un poco por encima de la media, pero otras muestras en otro momento puede que estén debajo de la media. En general, esperamos que el promedio de las aproximaciones $\\hat{\\mu}$ aproxime a $\\mu$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7a5df94f-896b-4625-91cb-66ed063ebac3",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Okay osea en resúmen no vamos a poder conocer jamás los coeficientes de la población. Así que lo que hacemos es decir que\n",
    "# \"la media de la y real de nuestra muestra es un aproximado bastante válido para usarlo como nuestra aproximación del valor para la población\" \n",
    "# Osea es suficientemente bueno para atrevernos a usarlo como un APROXIMADO del valor que queremos sacar para la totalidad de la población \n",
    "#Sin embargo, jamás será igual al valor real de toda la población, eso si ya es imposible. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f536538e-fd61-4199-83c1-0410e2e4eaca",
   "metadata": {},
   "source": [
    "Esto lleva a la pregunta: ¿qué tan cercanos son nuestros coeficientes estimados a los verdaderos coeficientes? Utilizamos el concepto de error estándar para evaluar esto.\n",
    "\n",
    "$$ \\text{Var}(\\hat{\\mu})=\\text{SE}(\\hat{\\mu})^2 = \\frac{\\sigma^2}{n} $$\n",
    "\n",
    "Donde $\\sigma$ es la desciación estándar de cada una de las observaciones $y_i$ de $Y$. El error estándar nos dice la cantidad promedio que el estimado difiere del valor verdadero. Podemos ver en la fórmula que entre más observaciones tengamos el error se hace más pequeño. Las fórmulas para errores estándar de $\\hat{\\beta_0}$ y $\\hat{\\beta_1}$ son:\n",
    "\n",
    "$$ \\text{SE}(\\hat{\\beta_0})^2 = \\sigma^2 [\\frac{1}{n} + \\frac{\\bar{x}^2}{\\sum_{i=1}^n (x_i - \\bar{x})^2}]$$\n",
    "\n",
    "$$ \\text{SE}(\\hat{\\beta_1})^2 = \\frac{\\sigma^2}{\\sum_{i=1}^n (x_i - \\bar{x})^2}$$\n",
    "\n",
    "$$ \\sigma^2 = \\text{Var}(\\epsilon) = \\text{RSE}^2 = \\frac{\\text{RSS}}{n-2}$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "8d05122a-ca3c-4a86-bc77-dac4549c997c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2102.530583132473"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Makes sense, osea sigma es qué tan alejado está cada puntito de tu recta ideal...y al cuadrado pq pues no queremos distancias negativas\n",
    "#Y supongo que se divide entre n para calcular una especie de \"promedio\" de esta desviación de todos los puntos. \n",
    "\n",
    "#PARA RSS\n",
    "\n",
    "beta_para_error_arreglo = np.array([beta_0,beta_1])\n",
    "beta_para_error = np.reshape(beta_para_error_arreglo,[2,1])\n",
    "\n",
    "RSS = funcion_de_costo(beta_para_error,X,y_vector)\n",
    "RSS \n",
    "#funcion_de_costo(beta,X,y)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8016731b-1e90-47b9-9cf7-d8b2206f3423",
   "metadata": {},
   "source": [
    "Para que estas fórmulas sean validas asumimos que los errores $\\epsilon_i$ tienen varianza común $\\sigma^2$ y que no están correlacionados.\n",
    "\n",
    "Calcula los errores estándar de los coeficientes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "34259067-22f4-4cfe-9334-8061d4a0af97",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "10.618841328951884"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Osea supongo que tengo que usar los datos de mi regresión porque de manera analítica no saqué ningún \"rss\" \n",
    "sigma_cuadrado = RSS / (200-2)\n",
    "sigma_cuadrado "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "id": "c036ffde-86f4-4319-a00b-23d0c796aceb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.2604507727096696"
      ]
     },
     "execution_count": 171,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "error_estandar_b0_cuadrado = sigma_cuadrado * (1/200)+((np.mean(x)**2)/(np.sum((x-np.mean(x))**2)))\n",
    "import math \n",
    "error_estandar_b0 = math.sqrt(error_estandar_b0_cuadrado)   \n",
    "error_estandar_b0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "id": "33188eb4-aa1e-4778-b682-4162371b2a45",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0026906071877975885"
      ]
     },
     "execution_count": 169,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "error_estandar_b1_cuadrado = sigma_cuadrado /((np.sum((x-np.mean(x))**2)))\n",
    "error_estandar_b1 = math.sqrt(error_estandar_b1_cuadrado) \n",
    "error_estandar_b1\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f5277b4b-2377-4d7e-bc7b-b57940534497",
   "metadata": {},
   "source": [
    "Estos errores se pueden usar para calcular intervalos de confianza. Un intervalo de confianza del $95\\%$ se define como un rango de valores en el cuál se encuentra el desconocido valor verdadero con un $95\\%$ de probabilidad.\n",
    "\n",
    "Otra forma de verlo es que si tomamos muestras repetidas y construimos un intervalo de confianza para cada una, el $95\\%$ de los intervalos creados van a contener el valor verdadero. Para la regresión el intervalo de confianza del $95\\%$ toma la forma:\n",
    "\n",
    "$$ \\hat{\\beta_j} \\pm 2 \\text{SE}(\\hat{\\beta_j})$$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "00435a1e-8a4c-45ba-a20b-39cfde4e32f3",
   "metadata": {},
   "source": [
    "Calcula los intervalos de confianza para los coeficientes estimados:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "id": "298526c4-f452-43a9-954d-fb751dbd183e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6.511695977778378, 7.5534990686170564)"
      ]
     },
     "execution_count": 185,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Para beta0 de TV\n",
    "lim_inferior_beta0 = beta_0 - 2*error_estandar_b0 \n",
    "lim_superior_beta0 = beta_0 + 2*error_estandar_b0 \n",
    "lim_inferior_beta0, lim_superior_beta0\n",
    "#Okay osea supuestamente entre ese rango está el valor beta0 verdadero del aproximado de la población "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "id": "112a00a7-b09a-46ac-9f9e-c156068dcfc2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.04215539842423376, 0.05291782717542411)"
      ]
     },
     "execution_count": 183,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Para beta1 de TV \n",
    "lim_inferior_beta1 = beta_1 - 2*error_estandar_b1 \n",
    "lim_superior_beta1 = beta_1 + 2*error_estandar_b1  \n",
    "lim_inferior_beta1, lim_superior_beta1 \n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "74003172-10f7-47da-a8e0-60b493ea09d9",
   "metadata": {},
   "source": [
    "Los errores estándar también se usan para realizar pruebas de hipótesis. La prueba de hipótesis más común es probar la hipótesis nula de:\n",
    "\n",
    "$$ H_0: \\text{No hay relación entre } X \\text{ y } Y \\ \\ \\ \\ (\\beta_1=0)$$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bc94104c-8a2f-4e57-bbfc-bf4ccbdf7b1e",
   "metadata": {},
   "source": [
    "contra la hipótesis alternativa:\n",
    "$$ H_0: \\text{Hay alguna relación entre } X \\text{ y } Y \\ \\ \\ (\\beta_1 \\neq 0)$$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f2ca3d30-f332-428c-b774-8df3127a2ca2",
   "metadata": {},
   "source": [
    "Explica con tus palabras el significado de la hipótesis nula y la hipótesis alternativa."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "84203ea6-1f77-4ed3-93a1-1ced753940df",
   "metadata": {},
   "source": [
    "Antes de investigar cualquier definición, a simple vista puedo decir que la hipótesis nula se refiere a que el valor de beta_1, es decir, la pendiente de la recta modelo que queremos sacar es 0, por lo que jamás va a subir o bajar. Será una recta constante que siempre de el mismo valor de y para x. O en otras palabras, no hay una relación visible entre 2 conjuntos de datos. \n",
    "En cambio, la hipótesis alternativa es lo contrario. Como la pendiente es cualquier valor excepto 0, habrá una línea o recta que describa el cómo cambian los valores de y respecto a los de x, por más pequeño o grande que sea este cambio, al menos hay un cambio, y por lo tanto hay una relación entre los datos. \n",
    "Según una definición más formal de internet: \n",
    "Según la hipótesis nula, a menudo no hay ninguna diferencia o conexión perceptible entre las variables investigadas. Denota la ausencia de relación entre los componentes relevantes o de un efecto entre ellos.\n",
    "Es una afirmación sobre la población que es contradictoria con H0 y lo que concluimos cuando rechazamos H0. Esto es normalmente lo que el investigador está tratando de probar.\n",
    "\n",
    "Dado que las hipótesis nula y alternativa son contradictorias, debe examinar las pruebas para decidir si tiene suficiente evidencia para rechazar la hipótesis nula o no. Las pruebas se presentan en forma de datos de muestra.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d1b5f933-5f4b-4af1-b359-febefa670ed6",
   "metadata": {},
   "source": [
    "Para probal la hipótesis nula debemos determinar si nuestro estimado $\\hat{\\beta_1}$ de $\\beta_1$ está lo suficientemente alejado de cero para que podamos decir con confianza que este valor no es cero. \n",
    "\n",
    "¿Qué tan lejos? Depende de qué tanta confianza tengamos en el estimado encontrado. Si nuestro error estándar es pequeño y nuestro estimado está alejado de cero podríamos decir que hay muy poca probabilidad de que el valor verdadero sea 0. En cambio, si nuestro error estándar es grande y nuestro estimado está muy cerca de cero, entonces podrías ser que el valor verdadero sea cero y que no haya relación entre las variables."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "22e0abf7-02ff-4bfb-84be-fdb9c041a139",
   "metadata": {},
   "source": [
    "Se calcula un *estadístico t* dado por\n",
    "$$ t = \\frac{\\hat{\\beta_j} - \\mu}{\\text{SE}(\\hat{\\beta_j})} $$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "264c6ff4-b103-4a4e-8ad1-917a2ca6f9d0",
   "metadata": {},
   "source": [
    "donde $\\mu$ es el valor contra el que queremos probar.\n",
    "\n",
    "Calcula el estadístico t para tus coeficientes estimados, usando como referencia la prueba de hipótesis."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "id": "34d78052-f1ff-42ab-b47b-cdd93ef1f765",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(27.001638159995455, 17.667615330627395)"
      ]
     },
     "execution_count": 151,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "t_beta0 = (beta_0 - 0) / (error_estandar_b0) \n",
    "t_beta1 = (beta_1 - 0) / (error_estandar_b1)\n",
    "t_beta0, t_beta1 \n",
    "#Los valores están alejados de cero, entonces sí hay alguna relación entre x y y "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "07426977-b23c-461c-84b5-4ea67c1b8729",
   "metadata": {},
   "source": [
    "La distribución t tiene forma de campana y se parece bastante a la distribución normal cuando $n > 30$. Ya sólo es cuestión de calcular la probabilidad de observar cualquier número tal que su valor absoluto sea igual o mayor que el valor absoluto del estadístico t calculado. En otras palabras:\n",
    "$$ P(|x| \\geq |t|) $$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "20c4498b-7455-4047-8682-134764d91e03",
   "metadata": {},
   "source": [
    "A esta probabilidad la llamamos *p-value*. Un *p-value* pequeño indica que es poco probable que exista por puro azar una relación significativa entre predictor y respuesta, en caso de que no haya una asociación real entre predictor y respuesta. En otras palabras, el *p-value* te dice la probabilidad de que parezca que hay relación cuando no la hay.\n",
    "\n",
    "Si el *p-value* es pequeño, inferimos que sí hay una asociación entre el predictor y la respuesta, y **rechazamos la hipótesis nula**.\n",
    "  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eda8c2b7-fd86-41ca-9d9c-7014ae3ae434",
   "metadata": {},
   "source": [
    "¿Qué tan pequeño? Depende de la aplicación. Un valor muy común es del $5\\%$.\n",
    "\n",
    "Utiliza el siguiente código para calcular el *p-value* para tus coeficientes\n",
    "\n",
    "`from scipy import stats`\n",
    "\n",
    "`p_bj = 2*(1 - stats.t.cdf(np.abs(t_bj), n-2))`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "02a8778d-cc6c-4622-9eb6-394314d8aded",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.0, 0.0)"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from scipy import stats \n",
    "p_b0 = 2*(1 - stats.t.cdf(np.abs(t_beta0), 200-2))\n",
    "p_b1 = 2*(1 - stats.t.cdf(np.abs(t_beta1), 200-2))\n",
    "p_b0, p_b1 "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "07bdd3da-7060-4ff0-8390-438695fa2700",
   "metadata": {},
   "source": [
    "¿Se rechaza la hipótesis nula? ¿Qué significa?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8039f486-bb5f-410f-a499-0143b8dfb41e",
   "metadata": {},
   "source": [
    "Como el p-value para ambos valores es cero, se rechaza completamente la hipótesis nula. No es probable que parezca que exista una relación entre x y y por puro azar. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "79682d85-50b4-4d34-a8f1-9cd41c7224fa",
   "metadata": {},
   "source": [
    "### Verificando la precisión del modelo"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "88d380d6-01a2-483b-925f-37570e6a3add",
   "metadata": {},
   "source": [
    "Si ya tenemos unos coeficientes de regresión estimados y ya verificamos que la probabilidad de que sí hay relación entre predictor y respuesta es alta. ¿Cómo medimos qué tan bueno es nuestro modelo para predecir?\n",
    "- RSE (Residual Standard Error)\n",
    "- $R^2$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e15b30bb-8212-4e85-ab14-03f531e3dad9",
   "metadata": {},
   "source": [
    "#### $R^2$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "67a0cf23-481c-4423-93b1-7109dc5a84c4",
   "metadata": {},
   "source": [
    "El RSE se mide con unidades de $Y$, así que no siempre se puede saber cuál es un buen valor. Imagina que tienes un $Y$ con valores entre $-1$ y $1$, y que tienes otro $Y$ con valores entre $1'000,000$ y $100'000,000$. Los errores cuadrados van a ser mucho mayores en el segundo caso que en el primero, pero esto no significa que el modelo creado en el segundo caso sea malo.\n",
    "\n",
    "El estadístico $R^2$ es una medida de ajuste. Su valor es la proporción de la varianza sí explicada, así que siempre toma valores entre $0$ y $1$. Su fórmula es:\n",
    "\n",
    "$$ R^2 = \\frac{\\text{TSS} - \\text{RSS}}{\\text{TSS}} = 1 - \\frac{\\text{RSS}}{\\text{TSS}}$$\n",
    "$$ \\text{TSS} = \\sum_{i=1}^n (y_i - \\bar{y})^2$$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "803c5cee-3b0c-4d1b-bcbe-4048001e6c12",
   "metadata": {},
   "source": [
    "TSS mide la varianza total de $Y$. RSS mide la varianza que queda sin explicarse después de la regresión. Entonces TSS-RSS mide la varianza que sí está explicada.\n",
    "\n",
    "$R^2$ mide la proporción de la varianza en $Y$ que puede ser explicada usando $X$.\n",
    "\n",
    "Calcula el estadístico $R^2$. ¿Cuánta varianza quedó sin explicar?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "id": "1f8eae38-22eb-4acf-9a5f-f67d672a9515",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5417.14875, 0.611875050849864)"
      ]
     },
     "execution_count": 155,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "TSS = np.sum((y-np.mean(y))**2) \n",
    "R_cuadrada = 1 - (RSS / TSS) \n",
    "TSS, R_cuadrada "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "id": "8f05c72a-2b51-4b05-a724-e270a5c5a7e6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "La varianza que quedó sin explicar fue de 0.38812494915013596\n"
     ]
    }
   ],
   "source": [
    "sin_explicar = 1 - R_cuadrada \n",
    "print(\"La varianza que quedó sin explicar fue de \" + str(sin_explicar) ) "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "68cfc710-2c1d-444a-a4b5-c7f6b140e887",
   "metadata": {},
   "source": [
    "#### REGRESIÓN LINEAL RADIO VS SALES "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "id": "3d8fdcad-a38a-4eda-ad06-5a42112e7de6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      37.8\n",
       "1      39.3\n",
       "2      45.9\n",
       "3      41.3\n",
       "4      10.8\n",
       "       ... \n",
       "195     3.7\n",
       "196     4.9\n",
       "197     9.3\n",
       "198    42.0\n",
       "199     8.6\n",
       "Name: radio, Length: 200, dtype: float64"
      ]
     },
     "execution_count": 209,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pandas_x_radio = tabla[\"radio\"] \n",
    "pandas_x_radio "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "id": "02e06f87-e4e2-47fe-a967-2d129d589156",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      22.1\n",
       "1      10.4\n",
       "2       9.3\n",
       "3      18.5\n",
       "4      12.9\n",
       "       ... \n",
       "195     7.6\n",
       "196     9.7\n",
       "197    12.8\n",
       "198    25.5\n",
       "199    13.4\n",
       "Name: sales, Length: 200, dtype: float64"
      ]
     },
     "execution_count": 211,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pandas_y_radio = tabla[\"sales\"] \n",
    "pandas_y_radio "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 213,
   "id": "623a57a4-ce6b-47c6-966f-a75868abe802",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "200"
      ]
     },
     "execution_count": 213,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "puntos = tabla[\"sales\"].size \n",
    "n = puntos \n",
    "n "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 215,
   "id": "fb176ec5-4a6b-459c-a12a-7cf5cadc6f9b",
   "metadata": {},
   "outputs": [],
   "source": [
    "x_radio = pandas_x_radio.to_numpy() \n",
    "y_radio = pandas_y_radio.to_numpy() \n",
    "ones_radio = np.ones([n,1]) \n",
    "x_factor_radio = np.reshape(x_radio, [n,1])\n",
    "X_radio = np.hstack((ones_radio, x_factor_radio))\n",
    "\n",
    "y_vector_radio = np.reshape(y_radio, [n,1]) \n",
    "n, p = X_radio.shape\n",
    "beta_radio = np.random.rand(p)   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 217,
   "id": "dff309c2-d0b7-49ae-8ab9-ab9e2b8828e9",
   "metadata": {},
   "outputs": [],
   "source": [
    "def funcion_de_costo_radio(beta_radio, X_radio, y_radio):\n",
    "    n, p = X_radio.shape\n",
    "    beta_radio = np.reshape(beta_radio, [p,1])\n",
    "    y_prediccion_radio = X_radio @ beta_radio \n",
    "    error_radio = y_prediccion_radio - y_radio \n",
    "    rss_radio = error_radio.T @ error_radio \n",
    "    return rss_radio[0,0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "id": "b482bde9-1ddb-4bba-911e-5b4299e66f07",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "  message: Desired error not necessarily achieved due to precision loss.\n",
       "  success: False\n",
       "   status: 2\n",
       "      fun: 3618.4795490250963\n",
       "        x: [ 9.312e+00  2.025e-01]\n",
       "      nit: 6\n",
       "      jac: [-6.104e-05  0.000e+00]\n",
       " hess_inv: [[ 2.985e-04 -9.132e-06]\n",
       "            [-9.132e-06  3.566e-06]]\n",
       "     nfev: 33\n",
       "     njev: 11"
      ]
     },
     "execution_count": 219,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import scipy.optimize as opt \n",
    "solucion_radio = opt.minimize(funcion_de_costo_radio, beta_radio, args=(X_radio,y_vector_radio)) \n",
    "solucion_radio "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "id": "0d928a23-3e97-4841-bb42-0d9ee6b65021",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Los parámetros del modelo utilizando sólo radio y ventas son b_0: 9.3116381115385 beta_1: 0.20249577546505046\n"
     ]
    }
   ],
   "source": [
    "beta_0_radio = solucion_radio.x[0] \n",
    "beta_1_radio = solucion_radio.x[1] \n",
    "print(\"Los parámetros del modelo utilizando sólo radio y ventas son b_0: \" + str(beta_0_radio) + \" beta_1: \" + str(beta_1_radio))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 223,
   "id": "eac18e96-7109-46ad-9e64-aaca27f54f8d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "valores_beta_radio = [9.311638432865484, 0.20249576557077573] \n",
    "plt.scatter(x_radio,y_radio,s=40,c='#06d6a0') \n",
    "x_lim_radio = [0,100] \n",
    "x_lim_ones_radio = np.c_[np.ones(2), x_lim_radio]\n",
    "y_lim_radio = x_lim_ones_radio.dot(valores_beta_radio)\n",
    "plt.plot(x_lim_radio, y_lim_radio, 'r-')\n",
    "plt.axis([0,100,0,30])\n",
    "plt.xlabel('radio')\n",
    "plt.ylabel('ventas')\n",
    "plt.title('radio x ventas') \n",
    "plt.grid() "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3515b8e5-9585-4274-9aa0-96a9e0f30002",
   "metadata": {},
   "source": [
    "#### REGRESIÓN LINEAL NEWSPAPER VS SALES "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 243,
   "id": "172a91ce-3a3b-4c9c-8e6d-a489e4d78525",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      69.2\n",
       "1      45.1\n",
       "2      69.3\n",
       "3      58.5\n",
       "4      58.4\n",
       "       ... \n",
       "195    13.8\n",
       "196     8.1\n",
       "197     6.4\n",
       "198    66.2\n",
       "199     8.7\n",
       "Name: newspaper, Length: 200, dtype: float64"
      ]
     },
     "execution_count": 243,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pandas_x_newspaper = tabla[\"newspaper\"] \n",
    "pandas_x_newspaper"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 245,
   "id": "98548688-f8f8-4e51-8c81-5af95731cfb6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      22.1\n",
       "1      10.4\n",
       "2       9.3\n",
       "3      18.5\n",
       "4      12.9\n",
       "       ... \n",
       "195     7.6\n",
       "196     9.7\n",
       "197    12.8\n",
       "198    25.5\n",
       "199    13.4\n",
       "Name: sales, Length: 200, dtype: float64"
      ]
     },
     "execution_count": 245,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pandas_y_newspaper = tabla[\"sales\"] \n",
    "pandas_y_newspaper"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 247,
   "id": "1844984a-9ed6-474c-9ca8-b27d9463708d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "200"
      ]
     },
     "execution_count": 247,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "puntos = tabla[\"sales\"].size \n",
    "n = puntos \n",
    "n "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 249,
   "id": "81a4c2d3-fb6b-4208-b583-27ccb7ef9caf",
   "metadata": {},
   "outputs": [],
   "source": [
    "x_newspaper = pandas_x_newspaper.to_numpy() \n",
    "y_newspaper = pandas_y_newspaper.to_numpy() \n",
    "ones_newspaper = np.ones([n,1]) \n",
    "x_factor_newspaper = np.reshape(x_newspaper, [n,1])\n",
    "X_newspaper = np.hstack((ones_newspaper, x_factor_newspaper))\n",
    "\n",
    "y_vector_newspaper = np.reshape(y_newspaper, [n,1]) \n",
    "n, p = X_newspaper.shape\n",
    "beta_newspaper = np.random.rand(p)  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 251,
   "id": "936f1869-c526-4195-a0b4-7ff0c81e5e66",
   "metadata": {},
   "outputs": [],
   "source": [
    "def funcion_de_costo_newspaper(beta_newspaper, X_newspaper, y_newspaper):\n",
    "    n, p = X_newspaper.shape\n",
    "    beta_newspaper = np.reshape(beta_newspaper, [p,1])\n",
    "    y_prediccion_newspaper = X_newspaper @ beta_newspaper\n",
    "    error_newspaper = y_prediccion_newspaper - y_newspaper\n",
    "    rss_newspaper = error_newspaper.T @ error_newspaper \n",
    "    return rss_newspaper[0,0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 255,
   "id": "9fd4d017-5bf8-47e2-a4ff-27a13121b545",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "  message: Optimization terminated successfully.\n",
       "  success: True\n",
       "   status: 0\n",
       "      fun: 5134.804544111982\n",
       "        x: [ 1.235e+01  5.469e-02]\n",
       "      nit: 4\n",
       "      jac: [ 0.000e+00  0.000e+00]\n",
       " hess_inv: [[ 7.445e-03 -1.619e-04]\n",
       "            [-1.619e-04  5.297e-06]]\n",
       "     nfev: 21\n",
       "     njev: 7"
      ]
     },
     "execution_count": 255,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import scipy.optimize as opt \n",
    "solucion_newspaper = opt.minimize(funcion_de_costo_newspaper, beta_newspaper, args=(X_newspaper,y_vector_newspaper)) \n",
    "solucion_newspaper"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 259,
   "id": "bb19bd81-7b7c-43d1-b274-2ed50f33d20f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Los parámetros del modelo utilizando sólo newspaper y ventas son b_0: 12.35140770623768 beta_1: 0.05469307717302808\n"
     ]
    }
   ],
   "source": [
    "beta_0_newspaper = solucion_newspaper.x[0] \n",
    "beta_1_newspaper = solucion_newspaper.x[1] \n",
    "print(\"Los parámetros del modelo utilizando sólo newspaper y ventas son b_0: \" + str(beta_0_newspaper) + \" beta_1: \" + str(beta_1_newspaper))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 261,
   "id": "4cd817a0-5e21-4e23-9756-fe84c5efa6e5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "valores_beta_newspaper = [12.351407685432797, 0.05469307770791938] \n",
    "plt.scatter(x_newspaper,y_newspaper,s=40,c='#06d6a0') \n",
    "x_lim_newspaper = [0,110] \n",
    "x_lim_ones_newspaper = np.c_[np.ones(2), x_lim_newspaper]\n",
    "y_lim_newspaper = x_lim_ones_newspaper.dot(valores_beta_newspaper)\n",
    "plt.plot(x_lim_newspaper, y_lim_newspaper, 'r-')\n",
    "plt.axis([0,110,0,30])\n",
    "plt.xlabel('newspaper')\n",
    "plt.ylabel('ventas')\n",
    "plt.title('newspaper x ventas') \n",
    "plt.grid() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 225,
   "id": "474bfb4c-305e-4d95-b8b9-0693cc3145db",
   "metadata": {},
   "outputs": [],
   "source": [
    "#PARA RSS\n",
    "beta_para_error_arreglo_radio = np.array([beta_0_radio,beta_1_radio])\n",
    "beta_para_error_radio = np.reshape(beta_para_error_arreglo_radio,[2,1])\n",
    "\n",
    "RSS_radio = funcion_de_costo_radio(beta_para_error_radio,X_radio,y_vector_radio)\n",
    "#RSS_radio \n",
    "\n",
    "sigma_cuadrado_radio = RSS_radio / (200-2)\n",
    "#sigma_cuadrado \n",
    "\n",
    "error_estandar_b0_cuadrado_radio = sigma_cuadrado_radio * (1/200)+((np.mean(x_radio)**2)/(np.sum((x_radio-np.mean(x_radio))**2)))\n",
    "import math \n",
    "error_estandar_b0_radio = math.sqrt(error_estandar_b0_cuadrado_radio)   \n",
    "#error_estandar_b0_radio \n",
    "\n",
    "error_estandar_b1_cuadrado_radio = sigma_cuadrado_radio /((np.sum((x_radio-np.mean(x_radio))**2)))\n",
    "error_estandar_b1_radio = math.sqrt(error_estandar_b1_cuadrado_radio) \n",
    "#error_estandar_b1_radio \n",
    "\n",
    "#Intervalo beta0 radio\n",
    "lim_inferior_beta0_radio = beta_0_radio - 2*error_estandar_b0_radio \n",
    "lim_superior_beta0_radio = beta_0_radio + 2*error_estandar_b0_radio \n",
    "#lim_inferior_beta0_radio, lim_superior_beta0_radio \n",
    "\n",
    "#Intervalo beta1 radio \n",
    "lim_inferior_beta1_radio = beta_1_radio - 2*error_estandar_b1_radio \n",
    "lim_superior_beta1_radio = beta_1_radio + 2*error_estandar_b1_radio  \n",
    "#lim_inferior_beta1_radio, lim_superior_beta1_radio \n",
    "\n",
    "#Estadístico t \n",
    "t_beta0_radio = (beta_0_radio - 0) / (error_estandar_b0_radio) \n",
    "t_beta1_radio = (beta_1_radio - 0) / (error_estandar_b1_radio)\n",
    "#t_beta0_radio, t_beta1_radio\n",
    "\n",
    "#p-value \n",
    "from scipy import stats \n",
    "p_b0_radio = 2*(1 - stats.t.cdf(np.abs(t_beta0_radio), 200-2))\n",
    "p_b1_radio = 2*(1 - stats.t.cdf(np.abs(t_beta1_radio), 200-2))\n",
    "#p_b0_radio, p_b1_radio \n",
    "\n",
    "#TSS R^2 \n",
    "TSS_radio = np.sum((y_radio-np.mean(y_radio))**2) \n",
    "R_cuadrada_radio = 1 - (RSS_radio / TSS_radio) \n",
    "#TSS_radio, R_cuadrada_radio\n",
    "\n",
    "sin_explicar_radio = 1 - R_cuadrada_radio \n",
    "#print(\"La varianza que quedó sin explicar fue de \" + str(sin_explicar_radio) ) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 263,
   "id": "61580314-e1bb-4da7-b0c4-4de10be79190",
   "metadata": {},
   "outputs": [],
   "source": [
    "#PARA RSS\n",
    "beta_para_error_arreglo_newspaper = np.array([beta_0_newspaper,beta_1_newspaper])\n",
    "beta_para_error_newspaper = np.reshape(beta_para_error_arreglo_newspaper,[2,1])\n",
    "\n",
    "RSS_newspaper = funcion_de_costo_newspaper(beta_para_error_newspaper,X_newspaper,y_vector_newspaper)\n",
    "#RSS_newspaper\n",
    "\n",
    "sigma_cuadrado_newspaper = RSS_newspaper /(200-2)\n",
    "#sigma_cuadrado_newspaper\n",
    "\n",
    "error_estandar_b0_cuadrado_newspaper = sigma_cuadrado_newspaper * (1/200)+((np.mean(x_newspaper)**2)/(np.sum((x_newspaper-np.mean(x_newspaper))**2)))\n",
    "import math \n",
    "error_estandar_b0_newspaper = math.sqrt(error_estandar_b0_cuadrado_newspaper)   \n",
    "#error_estandar_b0_newspaper \n",
    "\n",
    "error_estandar_b1_cuadrado_newspaper = sigma_cuadrado_newspaper /((np.sum((x_newspaper-np.mean(x_newspaper))**2)))\n",
    "error_estandar_b1_newspaper = math.sqrt(error_estandar_b1_cuadrado_newspaper) \n",
    "#error_estandar_b1_newspaper\n",
    "\n",
    "#Intervalo beta0 newspaper\n",
    "lim_inferior_beta0_newspaper = beta_0_newspaper - 2*error_estandar_b0_newspaper\n",
    "lim_superior_beta0_newspaper = beta_0_newspaper + 2*error_estandar_b0_newspaper \n",
    "#lim_inferior_beta0_newspaper, lim_superior_beta0_newspaper\n",
    "\n",
    "#Intervalo beta1 newspaper\n",
    "lim_inferior_beta1_newspaper = beta_1_newspaper - 2*error_estandar_b1_newspaper \n",
    "lim_superior_beta1_newspaper = beta_1_newspaper + 2*error_estandar_b1_newspaper  \n",
    "#lim_inferior_beta1_newspaper, lim_superior_beta1_newspaper \n",
    "\n",
    "#Estadístico t \n",
    "t_beta0_newspaper = (beta_0_newspaper - 0) / (error_estandar_b0_newspaper) \n",
    "t_beta1_newspaper = (beta_1_newspaper - 0) / (error_estandar_b1_newspaper)\n",
    "#t_beta0_newspaper, t_beta1_newspaper\n",
    "\n",
    "#p-value \n",
    "from scipy import stats \n",
    "p_b0_newspaper = 2*(1 - stats.t.cdf(np.abs(t_beta0_newspaper), 200-2))\n",
    "p_b1_newspaper = 2*(1 - stats.t.cdf(np.abs(t_beta1_newspaper), 200-2))\n",
    "#p_b0_newspaper, p_b1_newspaper \n",
    "\n",
    "#TSS R^2 \n",
    "TSS_newspaper = np.sum((y_newspaper-np.mean(y_newspaper))**2) \n",
    "R_cuadrada_newspaper = 1 - (RSS_newspaper / TSS_newspaper) \n",
    "#TSS_newspaper, R_cuadrada_newspaper\n",
    "\n",
    "sin_explicar_newspaper = 1 - R_cuadrada_newspaper \n",
    "#print(\"La varianza que quedó sin explicar fue de \" + str(sin_explicar_newspaper) ) "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "70183ddf-ac30-4936-af06-2063f701ae9f",
   "metadata": {},
   "source": [
    "Realiza otras dos regresiones. Ya tienes hecha la regresión de ventas dado el gasto en publicidad de TV. Realiza la regresión para gastos en radio y gastos en periódico. Organiza las respuestas para que debajo de esta celda se tenga:\n",
    "- Título de regresión\n",
    "- Coeficientes estimados\n",
    "- Errores estándar de los coeficientes\n",
    "- Intervalos de confianza\n",
    "- Estadísticos t\n",
    "- p-values\n",
    "- Observaciones"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "38a74326-e131-4746-aa73-ba5e39dd316b",
   "metadata": {},
   "source": [
    "## **REGRESIÓN TV VS VENTAS**   \n",
    "$\\beta_0$: 7.0325979987582965   \n",
    "$\\beta_1$: 0.04753661038743672  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5c52084c-05ff-42d9-ad9d-ad6d3a44e80b",
   "metadata": {},
   "source": [
    "**Errores estándar de los coeficientes** "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "id": "56d368bf-d1c9-41a3-a795-7c79dff7cdf7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Para beta0: 0.2604507727096696\n",
      "Para beta1: 0.0026906071877975885\n"
     ]
    }
   ],
   "source": [
    "print(\"Para beta0: \" + str(error_estandar_b0) )   \n",
    "print(\"Para beta1: \" + str(error_estandar_b1) )  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9d38e2c6-610d-4eda-a3d1-0da05b0577e6",
   "metadata": {},
   "source": [
    "**Intervalos de confianza**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "id": "3f07cd59-f8ea-4065-b2c4-56cbf917dd43",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Para beta0 el límite inferior es: 6.511695977778378 y el límite superior es: 7.5534990686170564\n",
      "Para beta1 el límite inferior es: 0.04215539842423376 y el límite superior es: 0.05291782717542411\n"
     ]
    }
   ],
   "source": [
    "print(\"Para beta0 el límite inferior es: \" + str(lim_inferior_beta0) + \" y el límite superior es: \"+ str(lim_superior_beta0) ) \n",
    "print(\"Para beta1 el límite inferior es: \" + str(lim_inferior_beta1) + \" y el límite superior es: \"+ str(lim_superior_beta1) )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5e493ce9-6c46-457c-a958-a3ef00b94677",
   "metadata": {},
   "source": [
    "**Estadísticos t**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "id": "dde7b057-605a-47a6-b330-59f085143043",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " t para beta0: 27.001638159995455\n",
      " t para beta1: 17.667615330627395\n"
     ]
    }
   ],
   "source": [
    "print(\" t para beta0: \" + str(t_beta0)) \n",
    "print(\" t para beta1: \" + str(t_beta1)) "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b4863a5e-9e3a-4ce7-b82a-a5f265d90bef",
   "metadata": {},
   "source": [
    "**p-values**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "id": "cbdc8cab-4ca1-4f22-9b2f-b7c0d8d90f95",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " p-value para beta0: 0.0\n",
      " p-value para beta1: 0.0\n"
     ]
    }
   ],
   "source": [
    "print(\" p-value para beta0: \" + str(p_b0)) \n",
    "print(\" p-value para beta1: \" + str(p_b1)) "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cd66cdec-85e7-4054-9822-3f841388cbcd",
   "metadata": {},
   "source": [
    "**Observaciones**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8428f41f-2310-4cf7-b2c3-ef64909d506f",
   "metadata": {},
   "source": [
    "Los errores estándar de los coeficientes son muy bajos, por lo que parece que son buenas estimaciones de los valores verdaderos. De igual manera los intervalos de confianza no son muy amplios. Los estádísticos t están alejados de cero, y los p-values son cero, por lo que se rechaza la hipótesis nula. Se comprueba que sí hay alguna relación entre x y y que no puede darse por pura coincidencia. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "31016304-b7b1-4659-8cfe-f2e65f615f47",
   "metadata": {},
   "source": [
    "## **Regresión radio vs ventas**  \n",
    "$\\beta_0$: 9.311638432865484   \n",
    "$\\beta_1$: 0.20249576557077573  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "733d83ad-dd08-42e8-85dd-e88c4e009f54",
   "metadata": {},
   "source": [
    "**Errores estándar de los coeficientes**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 227,
   "id": "1afd607f-e7a7-4ede-9a91-6baca80a66b9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Para beta0: 0.3220463929651949\n",
      "Para beta1: 0.02041130636009066\n"
     ]
    }
   ],
   "source": [
    "print(\"Para beta0: \" + str(error_estandar_b0_radio) )   \n",
    "print(\"Para beta1: \" + str(error_estandar_b1_radio) )  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3d9b88eb-8ce6-4205-8fc6-780f6be8bf2a",
   "metadata": {},
   "source": [
    "**Intervalos de confianza**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 230,
   "id": "b9c41b77-a3f1-4afd-bd09-235c9872d7c5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Para beta0 el límite inferior es: 8.66754532560811 y el límite superior es: 9.95573089746889\n",
      "Para beta1 el límite inferior es: 0.16167316274486915 y el límite superior es: 0.24331838818523177\n"
     ]
    }
   ],
   "source": [
    "print(\"Para beta0 el límite inferior es: \" + str(lim_inferior_beta0_radio) + \" y el límite superior es: \"+ str(lim_superior_beta0_radio) ) \n",
    "print(\"Para beta1 el límite inferior es: \" + str(lim_inferior_beta1_radio) + \" y el límite superior es: \"+ str(lim_superior_beta1_radio) )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "90c4b873-b9b0-4979-af5e-ca3911bca270",
   "metadata": {},
   "source": [
    "**Estadísticos t**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 236,
   "id": "79685fca-80b9-4ff7-ad3e-80a3f3359985",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " t para beta0: 28.913964928478034\n",
      " t para beta1: 9.920765084442692\n"
     ]
    }
   ],
   "source": [
    "print(\" t para beta0: \" + str(t_beta0_radio)) \n",
    "print(\" t para beta1: \" + str(t_beta1_radio)) "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "80916be8-988b-4c76-a24e-6016cf2f9d35",
   "metadata": {},
   "source": [
    "**p-values**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 238,
   "id": "d9e9b659-1ca6-4efa-8931-84e2b5e5bfb0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " p-value para beta0: 0.0\n",
      " p-value para beta1: 0.0\n"
     ]
    }
   ],
   "source": [
    "print(\" p-value para beta0: \" + str(p_b0_radio)) \n",
    "print(\" p-value para beta1: \" + str(p_b1_radio)) "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "971d84be-90ee-406b-98e2-bdf266e962b2",
   "metadata": {},
   "source": [
    "**Observaciones**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ee077b25-0058-416d-a2a1-1a91cd8a405b",
   "metadata": {},
   "source": [
    "Los errores estándar de los coeficientes son muy bajos, por lo que parece que son buenas estimaciones de los valores verdaderos. De igual manera los intervalos de confianza no son muy amplios. Los estádísticos t están alejados de cero, y los p-values son cero, por lo que se rechaza la hipótesis nula. Se comprueba que sí hay alguna relación entre x y y que no puede darse por pura coincidencia. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d14f032e-2436-431f-85ed-46376c7bc1a9",
   "metadata": {},
   "source": [
    "## **Regresión newspaper vs ventas**  \n",
    "$\\beta_0$: 12.351407685432797   \n",
    "$\\beta_1$: 0.05469307770791938 "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bd7c825c-0ea2-44cf-9d28-2e85415379e3",
   "metadata": {},
   "source": [
    "**Errores estándar de los coeficientes**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 271,
   "id": "7e3bc524-96fa-4028-a353-fae9b06fc56c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Para beta0: 0.37357378690672094\n",
      "Para beta1: 0.01657572187635823\n"
     ]
    }
   ],
   "source": [
    "print(\"Para beta0: \" + str(error_estandar_b0_newspaper) )   \n",
    "print(\"Para beta1: \" + str(error_estandar_b1_newspaper) )  "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8e86ffe6-a8b6-47f4-8145-8c1993531cb4",
   "metadata": {},
   "source": [
    "**Intervalos de confianza**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 273,
   "id": "a4c3ee4c-3ac3-4201-9f32-8167debdc6ca",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Para beta0 el límite inferior es: 11.604260132424239 y el límite superior es: 13.098555280051121\n",
      "Para beta1 el límite inferior es: 0.021541633420311616 y el límite superior es: 0.08784452092574455\n"
     ]
    }
   ],
   "source": [
    "print(\"Para beta0 el límite inferior es: \" + str(lim_inferior_beta0_newspaper) + \" y el límite superior es: \"+ str(lim_superior_beta0_newspaper) ) \n",
    "print(\"Para beta1 el límite inferior es: \" + str(lim_inferior_beta1_newspaper) + \" y el límite superior es: \"+ str(lim_superior_beta1_newspaper) )"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "343ebc78-d2c9-4d41-b340-2b26abef7946",
   "metadata": {},
   "source": [
    "**Estadísticos t**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 275,
   "id": "2cc98253-d610-406b-a80c-54bc14f7ffac",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " t para beta0: 33.06283293726321\n",
      " t para beta1: 3.2995894586670285\n"
     ]
    }
   ],
   "source": [
    "print(\" t para beta0: \" + str(t_beta0_newspaper)) \n",
    "print(\" t para beta1: \" + str(t_beta1_newspaper)) "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "eb39fe62-1082-4943-bdb0-3c3645e1d27a",
   "metadata": {},
   "source": [
    "**p-values**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 277,
   "id": "a2ba44fa-c1ac-4854-a277-ff1690ab3547",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " p-value para beta0: 0.0\n",
      " p-value para beta1: 0.0011482008488195028\n"
     ]
    }
   ],
   "source": [
    "print(\" p-value para beta0: \" + str(p_b0_newspaper)) \n",
    "print(\" p-value para beta1: \" + str(p_b1_newspaper)) "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7d703cff-3710-4c05-87b6-0d46a9815cea",
   "metadata": {},
   "source": [
    "**Observaciones**"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "68867db0-920d-4d5e-a7ea-e533a1fac2e1",
   "metadata": {},
   "source": [
    "Los errores estándar de los coeficientes son muy bajos, por lo que parece que son buenas estimaciones de los valores verdaderos. De igual manera los intervalos de confianza no son muy amplios. El estadístico t de beta0 está muy alejado de 0, sin embargo el de beta1 es tan solo 3. Esto podría decir que podría darse el caso de que la relación entre beta1 y y fuera nula. De igual manera, en los p-values sale por primera vez en todas las regresiones un valor diferente de cero para beta1, lo cual podría significar que podría ser que hay una buena probabilidad de que la relación aparente entre x y y sea por pura coincidencia. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8a2ff0e6-809e-45bb-9034-3bf63ba3a685",
   "metadata": {},
   "source": [
    "## Regresión lineal múltiple"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e085ff8-cd00-409b-a814-ab90cd8f9427",
   "metadata": {},
   "source": [
    "En lugar de hacer una regresión para cada factor independiente, quizás se puede extender el modelo para que tenga varios factores dentro:\n",
    "\n",
    "$$ Y = \\beta_0 + \\beta_1 X_1 + \\beta_2 X_2 + ... + \\beta_p X_p + \\epsilon $$\n",
    "\n",
    "Para nuestro ejemplo de publicidad:\n",
    "\n",
    "$$ \\text{sales} = \\beta_0 + \\beta_1 (\\text{TV}) + \\beta_2 (\\text{radio}) + \\beta_3 (\\text{newspaper}) + \\epsilon $$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d3e58f81-7d4a-4880-b750-abe4d8503ca7",
   "metadata": {},
   "source": [
    "$$ \\hat{sales} = \\hat{\\beta_0} + ... $$"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9eb6b446-172f-4d28-a07d-37ec574a9060",
   "metadata": {},
   "source": [
    "Utiliza la función `minimize` para estimar los coeficientes $\\beta_0$, $\\beta_1$, $\\beta_2$ y $\\beta_3$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 294,
   "id": "1f9ea7f0-4f91-4578-b828-b6b1ff872d94",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      22.1\n",
       "1      10.4\n",
       "2       9.3\n",
       "3      18.5\n",
       "4      12.9\n",
       "       ... \n",
       "195     7.6\n",
       "196     9.7\n",
       "197    12.8\n",
       "198    25.5\n",
       "199    13.4\n",
       "Name: sales, Length: 200, dtype: float64"
      ]
     },
     "execution_count": 294,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pandas_y_total = tabla[\"sales\"] \n",
    "pandas_y_total"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 345,
   "id": "a0ba7ba8-9263-4e74-8a85-424265148bad",
   "metadata": {},
   "outputs": [],
   "source": [
    "pandas_x_tot_newspaper = tabla[\"newspaper\"] \n",
    "#pandas_x_tot_newspaper"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 350,
   "id": "124b2b39-c5f7-4752-94fa-a632821a898f",
   "metadata": {},
   "outputs": [],
   "source": [
    "pandas_x_tot_TV = tabla[\"TV\"]\n",
    "#pandas_x_tot_TV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 355,
   "id": "88d5fc78-96a2-4a2e-a83d-faf4f7554cf9",
   "metadata": {},
   "outputs": [],
   "source": [
    "pandas_x_tot_radio = tabla[\"radio\"] \n",
    "#pandas_x_tot_radio"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 357,
   "id": "466649e8-24a6-4bf8-abbe-d5b675ae06eb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "200"
      ]
     },
     "execution_count": 357,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "puntos = tabla[\"sales\"].size \n",
    "n = puntos \n",
    "n "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 370,
   "id": "b59993c0-867a-4060-b0c0-6263d454bb4b",
   "metadata": {},
   "outputs": [],
   "source": [
    "x_tot_radio = pandas_x_tot_radio.to_numpy() \n",
    "x_tot_TV = pandas_x_tot_TV.to_numpy()\n",
    "x_tot_newspaper = pandas_x_tot_newspaper.to_numpy()\n",
    "\n",
    "ones_tot = np.ones([n,1]) \n",
    "x_factor_tot_radio = np.reshape(x_tot_radio, [n,1])\n",
    "x_factor_tot_TV = np.reshape(x_tot_TV, [n,1])\n",
    "x_factor_tot_newspaper = np.reshape(x_tot_newspaper, [n,1])\n",
    "\n",
    "X_tot = np.hstack((ones_tot,x_factor_tot_TV,x_factor_tot_radio, x_factor_tot_newspaper))\n",
    "\n",
    "y_tot = pandas_y_total.to_numpy()\n",
    "y_vector_tot = np.reshape(y_tot, [n,1]) \n",
    "n_tot, p_tot = X_tot.shape\n",
    "beta_tot = np.random.rand(p_tot) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 314,
   "id": "666de2b5-e350-46ff-a4cf-7da0862d4bc9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(200, 4)"
      ]
     },
     "execution_count": 314,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_tot.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 372,
   "id": "dc6fa08a-60d5-4e6c-94f9-7e81b7501c1d",
   "metadata": {},
   "outputs": [],
   "source": [
    "def funcion_de_costo_tot(beta_tot, X_tot, y_tot):\n",
    "    n_tot, p_tot = X_tot.shape\n",
    "    beta_tot = np.reshape(beta_tot, [p_tot,1])\n",
    "    y_prediccion_tot = X_tot @ beta_tot\n",
    "    error_tot = y_prediccion_tot - y_tot\n",
    "    rss_tot = error_tot.T @ error_tot\n",
    "    return rss_tot[0,0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 376,
   "id": "5bce8e78-3c1c-4efc-a300-727dcd511dee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "  message: Desired error not necessarily achieved due to precision loss.\n",
       "  success: False\n",
       "   status: 2\n",
       "      fun: 556.8252629033757\n",
       "        x: [ 2.939e+00  4.576e-02  1.885e-01 -1.038e-03]\n",
       "      nit: 8\n",
       "      jac: [-2.289e-05 -6.485e-04 -1.297e-04 -1.526e-04]\n",
       " hess_inv: [[ 7.404e-05  8.372e-07 -2.230e-05  8.757e-06]\n",
       "            [ 8.372e-07  2.096e-07 -5.648e-07 -3.719e-07]\n",
       "            [-2.230e-05 -5.648e-07  1.127e-05 -4.285e-06]\n",
       "            [ 8.757e-06 -3.719e-07 -4.285e-06  5.325e-06]]\n",
       "     nfev: 90\n",
       "     njev: 18"
      ]
     },
     "execution_count": 376,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import scipy.optimize as opt \n",
    "solucion_tot= opt.minimize(funcion_de_costo_tot, beta_tot, args=(X_tot,y_vector_tot)) \n",
    "solucion_tot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 378,
   "id": "4a9da6fb-ff07-499b-a1d5-9ecb46cf8af1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Los parámetros del modelo utilizando los 3 parámetros son b_0: 2.938893889133141 beta_1: 0.045764617396313975beta_2: 0.1885300113894765beta_3: -0.0010375039559482578\n"
     ]
    }
   ],
   "source": [
    "beta_0_tot = solucion_tot.x[0] \n",
    "beta_1_tot = solucion_tot.x[1] \n",
    "beta_2_tot = solucion_tot.x[2]\n",
    "beta_3_tot = solucion_tot.x[3]\n",
    "print(\"Los parámetros del modelo utilizando los 3 parámetros son b_0: \" + str(beta_0_tot) + \" beta_1: \" + str(beta_1_tot) + \"beta_2: \" + str(beta_2_tot) + \"beta_3: \" + str(beta_3_tot) ) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 380,
   "id": "dbb0949e-0c82-4a3d-b12d-e89985f91269",
   "metadata": {},
   "outputs": [],
   "source": [
    "#no se si se puede que un parámetro salga negativo.... pero si está mal no encuentro el error. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc2d9355-bd60-4050-8f8a-ba07990edb51",
   "metadata": {},
   "source": [
    "Calcula el RSS y RSE."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 385,
   "id": "536bc533-32b9-4a00-8ccb-72a4f52fc70d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "556.8252629033757"
      ]
     },
     "execution_count": 385,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#PARA RSS\n",
    "beta_para_error_arreglo_tot = np.array([beta_0_tot,beta_1_tot,beta_2_tot,beta_3_tot])\n",
    "beta_para_error_tot = np.reshape(beta_para_error_arreglo_tot,[4,1])\n",
    "\n",
    "RSS_tot= funcion_de_costo_tot(beta_para_error_tot,X_tot,y_vector_tot)\n",
    "RSS_tot\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 393,
   "id": "7f38c9b6-c38f-4b73-bfe5-673c592009b0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.676976088840357"
      ]
     },
     "execution_count": 393,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sigma_cuadrado_tot = RSS_tot /(200-2)\n",
    "#sigma_cuadrado_tot \n",
    "#Sigma cuadrado es lo mismo que RSE cuadrado, así que le saco raíz cuadrada \n",
    "import math \n",
    "RSE_tot = math.sqrt(sigma_cuadrado_tot) \n",
    "RSE_tot"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "92d7d84a-1603-42d0-948b-fc111fb1c437",
   "metadata": {},
   "source": [
    "Dada tu matriz $X$ que contiene todos los factores como columnas, utiliza el siguiente código para encontrar el error estándar de tus estimaciones\n",
    "\n",
    "`var_beta = np.linalg.inv(X.T @ X) * rse**2`\n",
    "\n",
    "`std_beta = np.sqrt(var_beta.diagonal())`\n",
    "\n",
    "El orden de los valores corresponde al orden de los factores en las columnas de la matriz $X$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 400,
   "id": "8b274bd6-2c52-4392-ac84-b96783940115",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 9.63040535e-02, -2.63043223e-04, -1.10422189e-03,\n",
       "        -5.85051328e-04],\n",
       "       [-2.63043223e-04,  1.92608319e-06, -4.42523913e-07,\n",
       "        -3.23296087e-07],\n",
       "       [-1.10422189e-03, -4.42523913e-07,  7.34043267e-05,\n",
       "        -1.76208203e-05],\n",
       "       [-5.85051328e-04, -3.23296087e-07, -1.76208203e-05,\n",
       "         3.41205850e-05]])"
      ]
     },
     "execution_count": 400,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "var_beta = np.linalg.inv(X_tot.T @ X_tot) * RSE_tot**2\n",
    "var_beta"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 406,
   "id": "d1b80b77-156d-47eb-9301-dda79e2f89bc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.31032894, 0.00138783, 0.00856763, 0.00584128])"
      ]
     },
     "execution_count": 406,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "std_beta = np.sqrt(var_beta.diagonal())\n",
    "std_beta "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 408,
   "id": "3db64957-5f61-4ffd-8f56-419214cf54b6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0013878339929511649"
      ]
     },
     "execution_count": 408,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "std_beta[1]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2a18efd5-39e6-44ac-b370-301f7ba6cb6a",
   "metadata": {},
   "source": [
    "Calcula los estadísticos t y *p-values* de tus estimaciones."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 410,
   "id": "98bbd346-c080-45ee-bc87-1ff7e2f77034",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(9.470253891186168, 32.97557029785503, 22.00491341504008, 32.27544651390081)"
      ]
     },
     "execution_count": 410,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Estadístico t \n",
    "t_beta0_tot = (beta_0_tot - 0) / (std_beta[0]) \n",
    "t_beta1_tot = (beta_1_tot - 0) / (std_beta[1])\n",
    "t_beta2_tot = (beta_2_tot - 0) / (std_beta[2])\n",
    "t_beta3_tot = (beta_2_tot - 0) / (std_beta[3])\n",
    "t_beta0_tot, t_beta1_tot, t_beta2_tot, t_beta3_tot "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 412,
   "id": "60b048e5-5d00-4e81-a361-89d405e98a4d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.0, 0.0, 0.0, 0.0)"
      ]
     },
     "execution_count": 412,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#p-values \n",
    "from scipy import stats \n",
    "p_b0_tot = 2*(1 - stats.t.cdf(np.abs(t_beta0_tot), 200-2))\n",
    "p_b1_tot = 2*(1 - stats.t.cdf(np.abs(t_beta1_tot), 200-2))\n",
    "p_b2_tot = 2*(1 - stats.t.cdf(np.abs(t_beta2_tot), 200-2))\n",
    "p_b3_tot = 2*(1 - stats.t.cdf(np.abs(t_beta3_tot), 200-2))\n",
    "p_b0_radio, p_b1_radio,p_b2_tot, p_b3_tot"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "79717f5a-fa0f-437f-a6ba-93320b857281",
   "metadata": {},
   "source": [
    "¿Qué diferencias puedes observar entre los *p-values* de una regresión múltiple y los encontrados en regresiones simples? ¿Por qué crees que existen estas diferencias?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "635a0502-8904-4692-93f7-15c59e62c226",
   "metadata": {},
   "source": [
    "Pues por ejemplo en el caso de la regresión lineal de newspaper vs sales, uno de los p-values salío diferente a cero, lo que signficaba que la aparente realción entre x y y podía ser causa del azar y que por lo tanto podría no haber una relación verdadera entre estos datos. En cambio, cuando se hace la regresión lineal con todos los factores, todos los valores de errores como RSS, RSE o errores estándar etc....salen muy bajos. Además, el estadístico t de todas las beta sale alejado de cero, y los p-values salen como cero, lo cual significa que la recta sacada con la regresión lineal es aparentemente un muy buen modelo para describir el comportamiento de relación entre los parámetros y la y. \n",
    "Obviamente, en una regresión lineal con todo los factores, el error se reducirá en comparación a cuando se hacen regresiones solamente con uno o algunso de los factroes del modelo, ya que en este último caso no se estarán tomando los valores de manera adecuada. Todos los factores se relacionan unos con otros, y si se dja alguno de lado, el modelo saldrá con más error y no describirá el comportamiento de manera adecuada. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8f28d00e-ff72-45f5-89eb-6057053f1b4f",
   "metadata": {},
   "source": [
    "## Referencia\n",
    "\n",
    "James, G., Witten, D., Hastie, T., Tibshirani, R.,, Taylor, J. (2023). An Introduction to Statistical Learning with Applications in Python. Cham: Springer. ISBN: 978-3-031-38746-3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3ebe7efd-213a-4019-bb45-de9547729e04",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
